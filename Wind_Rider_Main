// Libraries
#include <string.h>
#include <Servo.h>

// LEDs:
#define led 9

// Communication variables:
byte buffer = 0;

// Spray wash servo variables:
int pos = 80; // Servo begins initially at 80 degrees

// Camera servo variables:
byte Input_data[30];
int current_pos;
// int i; already defined -- does this cause a problem?

//Dynamixel steer variable
int curr_pos = 1024;

// Drive and steering motor command bytes from remote control:
byte stop[] = {
  0xFF, 0x00, 0x00, 0x00, 0xFE};
byte forward[] = {
  0xFF, 0x00, 0x01, 0x00, 0xFE};
byte backward[] = {
  0xFF, 0x00, 0x02, 0x00, 0xFE};
byte left[] = {
  0xFF, 0x00, 0x04, 0x00, 0xFE};
byte right[] = {
  0xFF, 0x00, 0x08, 0x00, 0xFE};

// Vacuum motor commands from remote control:
byte suckOff[] = {
  0xFF, 0x01, 0x00, 0x00, 0xFE};
byte suckOn[] = {
  0xFF, 0x01, 0x01, 0x00, 0xFE};

// Spray wash commands from remote control:
byte sprayOff[] = {
  0xEE, 0x01, 0x00, 0x00, 0xFE};
byte sprayOn[] = {
  0xEE, 0x01, 0x01, 0x00, 0xFE};

// Camera commands from remote control:
byte cameraOff[] = {
  0xEE, 0x01, 0x00, 0x00, 0xFE};
byte cameraOn[] = {
  0xEE, 0x01, 0x01, 0x00, 0xFE};
byte cameraLeft[] = {
  0xEE, 0x01, 0x00, 0x00, 0xFE};
byte sprayRight[] = {
  0xEE, 0x01, 0x01, 0x00, 0xFE};
byte sprayUp[] = {
  0xEE, 0x01, 0x00, 0x00, 0xFE};
byte sprayDown[] = {
  0xEE, 0x01, 0x01, 0x00, 0xFE};

// Blank array to store captured command:
byte capturedByte[] = {
  00, 00, 00, 00, 00};

// Variables for counting:
int i = 0;
int j = 0;
int k = 0;
int m = 0;

// Command variables for switch statements:
int driveCommand = 0;
int vacuumCommand = 0;
int washCommand = 0;
int cameraCommand = 0;

// Create objects:
Servo ESC1;
Servo ESC2;
Servo sprayServo; // Spray wash servo
Servo up_down, left_right; // Camera servos

Dynamixel Dxl(DXL_BUS_SERIAL3); //Controlling Serial port for Dynamixels

void setup()
{

  // Setup for the WiFi card
  // Five second delays were added to allow extra time for WiFi card to configure
  delay(5000);
  Serial2.begin(115200);
  delay(5000);
  Serial2.println("AT+CWJAP=\"Robotics Lab 518a\",\"ccny10031\"\r\n\0");
  delay(5000);
  Serial2.println("AT+CIPMUX=1\r\n\0");
  delay(5000);
  Serial2.println("AT+CIPSERVER=1,8888\r\n\0");
  delay(5000);
  Serial2.println("AT+CIFSR\r\n\0");
  delay(5000);
  //Serial2.attachInterrupt(serialInterrupt);


  // LED indicators:
  pinMode(led, OUTPUT);
  
  // Servo setup:
  
  sprayServo.attach(20);
  up_down.attach(21);
  left_right.attach(22);

  /*
  Now we want to get the serialInterrupt to work on Serial 2; 
   This page gives ideas but I haven't tried yet:
   http://support.robotis.com/en/software/robotis_opencm/learning/serial_communication.htm
   */
  //SerialUSB.attachInterrupt(usbInterrupt);

}

void loop(){  
  
  while( (Serial2.available() > 0) && (buffer != stop[0]) )
  {
    // Reads Serial2, waiting for FF command:
    buffer = Serial2.read();
    Serial2.println("Waiting for command . . . ");  
  }// CLOSE while loop for reading serial

  capturedByte[0] = stop[0]; // Maybe redundant command

  // Series of IF statements to determine command:
  // 0 Byte. All commands begin with FF; if code gets here, assume capturedByte[0] == FF

  buffer = Serial2.read();     // Should read next byte after FF
  capturedByte[1] = buffer;    // Put next serial read into capturedByte[]

  // 1 Byte. Check for drive/steering(0x00) or suction(0x01):
  if (capturedByte[1] == stop[1])
  {
    // DRIVE could be correct, as long as capturedByte[4] is FE, which we can check below as in case 0, but it's not necessary
    // 2. Byte index 2 chooses switch for stop(0x00), forward(0x01), backward(0x02), left(0x04), right(0x08)

    buffer = Serial2.read();     // Should read next byte after FF
    capturedByte[2] = buffer;    // Put next serial read into capturedByte[]

    driveCommand = capturedByte[2];
    switch(driveCommand)
    {
    case 0:
      //STOP
      //SerialUSB.println("You have stopped.");
      break;
    case 1:
      // FORWARD
      //SerialUSB.println("You are going forward.");
      break;
    case 2:
      // BACKWARD
      break;
    case 4:
      // LEFT
      break;
    case 8:
      // RIGHT
      break; 
    default: 
      // ?
      break;
    }

  }//CLOSE if 1 check
  else if (capturedByte[1] == suckOff[1])
  {

    buffer = Serial2.read();     // Should read next byte after FF
    capturedByte[2] = buffer;    // Put next serial read into capturedByte[]

    // Vacuum command is selected (0x01)
    // Byte index 2 will set vacuum intensity

    vacuumCommand = capturedByte[2];
    switch(vacuumCommand)
    {
    case 0:
      // Sucking is turned OFF
      break;
    case 1:
      // Sucking is turned ON
      break;
    default:
      // Invalid sucking command
      break;
    }// CLOSE SUCK switch
  }// CLOSE else if 1
  else
  {
  }// CLOSE else 1
}// CLOSE void loop


void blink()
{
  digitalWrite(led, HIGH);
  delay(50);
  digitalWrite(led, LOW);
  delay(50);
}
